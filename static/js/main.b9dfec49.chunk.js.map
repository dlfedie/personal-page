{"version":3,"sources":["images/headshot.JPG","images/Calculator.png","images/ReadMe.png","images/ToDo.png","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","myPic","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6KC0CzBC,sMAjCX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,2BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,qBACAH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOC,IAAI,SAASH,UAAU,aACxCH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAAxE,aAEFT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,WAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,mDAAmDC,OAAO,SAASC,IAAI,uBAA/E,WAAH,8EACAT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,+CAA+CC,OAAO,SAASC,IAAI,uBAA3E,qBAAH,0CACAT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,eAAH,qCACAT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,2CAA2CC,OAAO,SAASC,IAAI,uBAAvE,eAAH,oEACAT,EAAAC,EAAAC,cAAA,6HAKFF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,gDA5BQO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b9dfec49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.8da13644.JPG\";","module.exports = __webpack_public_path__ + \"static/media/Calculator.568dbd9b.png\";","module.exports = __webpack_public_path__ + \"static/media/ReadMe.dacd249a.png\";","module.exports = __webpack_public_path__ + \"static/media/ToDo.bb48751b.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport myPic from '../../images/headshot.JPG';\nimport CalculatorPic from '../../images/Calculator.png';\nimport ReadMePic from '../../images/ReadMe.png';\nimport ToDoPic from '../../images/ToDo.png';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Dustin Fedie</h1>\n        </header>\n\n        <div className=\"textSpot\">\n          <h2 className=\"headerEmail\">dlfedie@gmail.com</h2>\n          <img src={myPic} alt=\"Dustin\" className=\"headshot\" />\n          <div>\n            <a href=\"https://www.linkedin.com/in/dustin-fedie/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a>\n          </div>\n          <div>\n            <a href=\"https://github.com/dlfedie\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n          </div>\n          <div className=\"bottomBox\">\n            <h3>Projects I've worked on:</h3>\n            <p><a href=\"https://evening-atoll-19955.herokuapp.com/#/home\" target=\"_blank\" rel=\"noopener noreferrer\">ReadMe:</a> a mobile-first app to track reading progress and friend recommendations. </p>\n            <p><a href=\"https://mighty-fortress-03181.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Movie Collection:</a> a small web app to store movie info. </p>\n            <p><a href=\"https://secure-retreat-26616.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">To Do List:</a> a small web app to track tasks. </p>\n            <p><a href=\"https://obscure-tor-27806.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Calculator:</a> one of my first projects of creating a server-side calculator. </p>\n            <p>Note: these are all hosted on Heroku, so if they don't load right away, give it a moment to fire up the server!</p>\n            {/* <img src={ReadMePic} alt=\"screenshot of ReadMe application\" className=\"screenshots\" />\n            <img src={ToDoPic} alt=\"screenshot of ToDo application\" className=\"screenshots\" />\n            <img src={CalculatorPic} alt=\"screenshot of Calculator application\" className=\"screenshots\" /> */}\n          </div>\n          <footer className=\"footer\">&copy; Dustin Fedie, including photos</footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}